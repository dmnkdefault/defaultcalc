plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.82'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Minecraft Libraries"
        url = "https://libraries.minecraft.net/"
    }
    maven {
        name = "NeoForged"
        url = "https://maven.neoforged.net/releases/"
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

// New configuration for dependencies that should be embedded in the output JAR
configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    // MathParser dependency marked for embedding
    embed 'org.mariuszgromada.math:MathParser.org-mXparser:6.1.0'
    implementation 'net.neoforged:neoforge:21.1.164'
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : mod_version,
                'Implementation-Title'    : mod_name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_authors,
        ])
    }
    finalizedBy 'reobfJar'
}

// Process resources task for mod metadata
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

// Configure shadow JAR to include dependencies from 'embed' configuration
shadowJar {
    archiveClassifier.set('')

    // Include only the dependencies from the 'embed' configuration
    configurations = [project.configurations.embed]

    // Relocate the mXparser to avoid conflicts
    relocate 'org.mariuszgromada.math.mxparser', 'com.defavlt.defaultcalc.shadow.org.mariuszgromada.math.mxparser'

    // Merge service files correctly
    mergeServiceFiles()

    // Make sure we include all the main classes too
    from sourceSets.main.output

    // Ensure it gets reobfuscated
    finalizedBy 'reobfShadowJar'
}

// Override the default artifact with the shadow jar
artifacts {
    archives shadowJar
}


tasks.build.dependsOn tasks.shadowJar

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
    repositories {
        maven {
            url = "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}